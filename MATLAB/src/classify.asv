function [decoded confidence] = classify(chars, method)
% Performs character classification of the segmented input image using
% pixel counts, vertical projections, horizontal projections, or template
% matching.

    % Load the templates
    load neuronal;

    % Turn off the warnings about dividing by zero
    warning off MATLAB:divideByZero

    % Setup the decoded result
    decoded = char(zeros(1,6));

    % Confidence starts at 1.0 (perfect)
    confidence = 1.0;

    % For each of the 6 characters in the image...
    for i=1:6

        inVP = sum(chars(:,:,i),2);
        inHP = sum(chars(:,:,i)',2);
        res = net([inVP;inHP]);
   
            %if (strcmp(method, 'PixelCounts') == 1)
             %   tempSum = sum(sum(templates(:,:,j)));
             %   inSum = sum(sum(chars(:,:,i)));
             %  allCorrs(j) = 50 - abs(tempSum - inSum);
           % else % Do template matching by default
           %     temp = templates(:,:,j);
           %     in = chars(:,:,i);
           %     allCorrs(j) = corr2(temp, in);
         %   end
       % end

        % Find the first template with the best correlation
        index = find(res == max(res), 1);
        
        % Update the classification confidence
        %confidence = max(allCorrs) * confidence;

        % Convert it from an index back into ASCII
        if (index <= 10) % number
            index = index + 47;
        elseif (index >= 11 && index <= 36)% upper case character
            index = index + 54;
        else
            % We should never get here
        end
        
        % Store the decoded character
        decoded(i) = char(index);
    end
end